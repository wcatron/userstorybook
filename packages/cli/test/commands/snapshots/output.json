[
    {
        "fileName": "createUser.ts",
        "name": "createUser",
        "namePretty": "Create user",
        "code": "function (\n  { name, roles },\n  { auth, datasources: { userRepository } }\n) {\n  if (!auth?.roles.includes(\"admin\")) {\n    throw new Error(\"Improper role for creating a new user\");\n  }\n  if (roles.includes(\"admin\") && !(isOnTheAdminList(auth.id) &&\n    isOnTheAdminList(name))) {\n    throw new Error(\"Improper role for creating a new user with admin role\");\n  }\n  const user = userRepository.create(name, roles);\n  return user;\n}",
        "returns": [
            {
                "name": "name",
                "type": "string",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "children": []
            },
            {
                "name": "roles",
                "type": "AuthRoles[]",
                "children": []
            }
        ],
        "inputs": [
            {
                "name": "name",
                "type": "string",
                "children": []
            },
            {
                "name": "roles",
                "type": "AuthRoles[]",
                "children": []
            }
        ],
        "context": [
            {
                "name": "auth",
                "type": "AuthContext",
                "children": [
                    {
                        "name": "id",
                        "type": "string",
                        "children": []
                    },
                    {
                        "name": "roles",
                        "type": "AuthRoles[]",
                        "children": []
                    }
                ]
            },
            {
                "name": "datasources",
                "type": "{ userRepository: UserRepository; }",
                "children": [
                    {
                        "name": "userRepository",
                        "type": "UserRepository",
                        "children": [
                            {
                                "name": "get",
                                "type": "(id: string) => User",
                                "children": []
                            },
                            {
                                "name": "create",
                                "type": "(name: string, roles: AuthRoles[]) => User",
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "fileName": "getUser.ts",
        "name": "getUser",
        "namePretty": "Get user",
        "code": "function ({ id }, { datasources: { userRepository: userRespository }, auth }) {\n  const isAdmin = auth?.roles.includes(\"admin\");\n  const belongsToUser = id == auth?.id;\n  if (id && (isAdmin || belongsToUser)) {\n    return userRespository.get(id);\n  } else if (auth?.id) {\n    return userRespository.get(auth.id);\n  } else {\n    throw new Error(\"Missing id or authenticated context required to get user\");\n  }\n}",
        "returns": [
            {
                "name": "name",
                "type": "string",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "children": []
            },
            {
                "name": "roles",
                "type": "AuthRoles[]",
                "children": []
            }
        ],
        "inputs": [
            {
                "name": "id",
                "type": "string",
                "children": []
            }
        ],
        "context": [
            {
                "name": "auth",
                "type": "AuthContext",
                "children": [
                    {
                        "name": "id",
                        "type": "string",
                        "children": []
                    },
                    {
                        "name": "roles",
                        "type": "AuthRoles[]",
                        "children": []
                    }
                ]
            },
            {
                "name": "datasources",
                "type": "{ userRepository: UserRepository; }",
                "children": [
                    {
                        "name": "userRepository",
                        "type": "UserRepository",
                        "children": [
                            {
                                "name": "get",
                                "type": "(id: string) => User",
                                "children": []
                            },
                            {
                                "name": "create",
                                "type": "(name: string, roles: AuthRoles[]) => User",
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    }
]