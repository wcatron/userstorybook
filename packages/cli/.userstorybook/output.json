[
    {
        "fileName": "buildUserStoryBook.ts",
        "name": "buildUserStoryBook",
        "namePretty": "Build user story book",
        "code": "async function (\n  { config: { root, skip, output }, flags: { verbose, jsonOnly } },\n  { files, templates, logger },\n) {\n    logger.log(`Loading use cases from '${process.cwd()}/${root}'`)\n    // TODO: Add tsConfigFilePath back, currently it causes imports to be added in front of types\n    const project = new Project()\n    const useCases = project.addSourceFilesAtPaths(`${root}/**`).map(parseUseCase(skip))\n      .filter((a): a is ParsedUseCase => a !== undefined)\n\n    if (verbose) console.log(JSON.stringify(useCases, undefined, 2))\n\n    await files.prepDirectory(output)\n\n    files.writeFile(join(output, 'output.json'), JSON.stringify(useCases, undefined, 4))\n\n    if (jsonOnly) {\n      return\n    }\n\n    await Promise.allSettled(useCases.map(async useCase => {\n      const result = templates.generate({\n        useCase,\n        useCases,\n      })\n      const filePath = join(output, `${useCase.name}.html`)\n      if (verbose)\n        console.log(`Generated result for ${useCase.namePretty}: ${filePath}`)\n\n      await files.writeFile(filePath, result)\n    }))\n  }",
        "returns": [
            {
                "name": "then",
                "type": "<TResult1 = void, TResult2 = never>(onfulfilled?: (value: void) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<...>",
                "children": []
            },
            {
                "name": "catch",
                "type": "<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>) => Promise<void | TResult>",
                "children": []
            },
            {
                "name": "finally",
                "type": "(onfinally?: () => void) => Promise<void>",
                "children": []
            },
            {
                "name": "__@toStringTag@73",
                "type": "string",
                "children": []
            }
        ],
        "inputs": [
            {
                "name": "config",
                "type": "Config",
                "children": [
                    {
                        "name": "output",
                        "type": "string",
                        "children": []
                    },
                    {
                        "name": "root",
                        "type": "string",
                        "children": []
                    },
                    {
                        "name": "tsConfigFilePath",
                        "type": "string",
                        "children": []
                    },
                    {
                        "name": "skip",
                        "type": "string[]",
                        "children": []
                    }
                ]
            },
            {
                "name": "flags",
                "type": "Flags",
                "children": [
                    {
                        "name": "verbose",
                        "type": "boolean",
                        "children": [
                            {
                                "name": "default",
                                "type": "boolean"
                            }
                        ]
                    },
                    {
                        "name": "jsonOnly",
                        "type": "boolean",
                        "children": [
                            {
                                "name": "default",
                                "type": "boolean"
                            }
                        ]
                    }
                ]
            }
        ],
        "context": [
            {
                "name": "files",
                "type": "FileDataSource",
                "children": [
                    {
                        "name": "prepDirectory",
                        "type": "(directory: string) => Promise<void>",
                        "children": []
                    },
                    {
                        "name": "writeFile",
                        "type": "(filePath: string, contents: string) => Promise<void>",
                        "children": []
                    }
                ]
            },
            {
                "name": "logger",
                "type": "Logger",
                "children": [
                    {
                        "name": "log",
                        "type": "(message: string) => void",
                        "children": []
                    }
                ]
            },
            {
                "name": "templates",
                "type": "TemplatesDataSource",
                "children": [
                    {
                        "name": "generate",
                        "type": "({ useCase, }: { useCase: ParsedUseCase; useCases: ParsedUseCase[]; }) => string",
                        "children": []
                    }
                ]
            }
        ]
    }
]